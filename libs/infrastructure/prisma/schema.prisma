// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// libs/infrastructure/prisma/schema.prisma
enum AppUserRole  {
  user
  super_admin
}
enum AppOrganizationRole {
  organization
}
enum AuthProvider {
  local
  google
  github
}
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  password  String?
  profileUrl String?
  orgId     String  @db.ObjectId
  role      AppUserRole     // user || super_admin
  isOwner   Boolean  @default(false)
  isVerified Boolean @default(false)
  isBlocked Boolean  @default(false)
  authProvider AuthProvider?
  organization  Organization? @relation(fields: [orgId], references: [id])
  assignedTasks Task[]
  attachments   Attachment[]
  comments      Comment[]
}

model Organization {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  name             String   @unique
  email            String   @unique
  password         String
  description      String?
  profileUrl       String?
  website          String?
  industry         String?
  location         String?
  phoneNumber      String?
  inviteCode       String?  // for invites
  role             AppOrganizationRole
  plan             String   @default("free")
  subscriptionId   String?
  settings         Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  members          User[]
  tasks    Task[]
  projects Project[]
  meetings Meeting[]
}

model Project {
  id           String          @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String
  startDate    DateTime?
  endDate      DateTime?
  orgId        String @db.ObjectId
  tasks        Task[]
  organization          Organization             @relation(fields: [orgId], references: [id])
}

model Task {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  description    String
  status         String?
  priority       String?
  tags           String?
  startDate      DateTime
  endDate        DateTime
  points         Int?
  projectId      String @db.ObjectId
  assignedUserId String @db.ObjectId
  orgId          String @db.ObjectId
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  project         Project          @relation(fields: [projectId], references: [id])
  assignee        User?            @relation( fields: [assignedUserId], references: [id])
  author          Organization             @relation(fields: [orgId], references: [id])
  attachments     Attachment[]
  comments        Comment[]
}

model Attachment {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  fileURL      String
  fileName     String?
  taskId       String @db.ObjectId
  orgId        String @db.ObjectId
  task         Task @relation(fields: [taskId], references: [id])
  uploadedBy   User @relation(fields: [orgId], references: [id])
}

model Comment {
  id     String    @id @default(auto()) @map("_id") @db.ObjectId
  text   String
  taskId String @db.ObjectId
  userId String @db.ObjectId

  task   Task @relation(fields: [taskId], references: [id])
  user   User @relation(fields: [userId], references: [id])
}

model Meeting {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  roomId    String
  subject   String
  orgId     String   @db.ObjectId
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organization Organization @relation(fields: [orgId], references: [id])
}
